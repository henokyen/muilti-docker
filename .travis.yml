sudo: required
services:
  - docker 
before_install:
  - docker build -t henokyen/react-test -f ./client/Dockerfile.dev ./client # look in to the client directory to get the build context
  # but if you have another project part to test then: 
  # - docker build myotherproject 
  # then on the script section below you write
  # - docker run myotherproject commnads to run the test

# remember the script section is the primary test running section.
script:
  - docker run henokyen/react-test npm run test -- --coverage

after_success: # build prodocution version for each of the project parts
  
  - docker build -t henok2346/multi-client ./client # it will use the default deockerfile which is Dockerfile
  - docker build -t henok2346/multi-nginx  ./nginx
  - docker build -t henok2346/multi-server ./server
  - docker build -t henok2346/multi-worker ./worker 
  
  #first login to the docker cli
  - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_ID" --password-stdin
  #take those images and push them to docker hub
  - docker push henok2346/multi-client
  - docker push henok2346/multi-nginx
  - docker push henok2346/multi-server
  - docker push henok2346/multi-worker
  
deploy:
  provider: elasticbeanstalk # deply the application on aws ealstic beanstalk
  region: "us-west-2" #is the  region where you originally created your elastic beanstalk instance.
  app: "multi-docker" # the name of your application on elatic beanstalk
  env: "MultiDocker-env" # the name of the environment on the elatic beanstalk
  bucket_name: elasticbeanstalk-us-west-2-319994344936
  bucket_path: docker-multi

  on:
    barach: master

  access_key_id: "$AWS_ACCESS_KEY"
  secret_access_key:
    secure: "$AWS_SECRET_KEY"