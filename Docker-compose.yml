
#This docker-compose file will automatically pull down the postgres image and start up a postgres database 
#on this machine.
version: '3'
#we'll then start to specify the list of different services
#that should be made available when we use the docker-compose file as a starting point for our application.
services:
  postgres: #this is the name of the service as it's been added to our docker-compose file.
    image: 'postgres:latest' # get the postgres:latest image from docker-hub to make this container
  
  # add the redis image in the same way 
  redis:
    image: "redis:latest"
  #now use the server image from the server directory
  nginx:
    restart: always # we want this image/container to run all the time
    build:
      dockerfile: Dockerfile.dev
      context: ./nginx
    ports:
      - '3050:80' #map the port 3050 from the locahost or outside world to port 80 of the container.
                  #nginx by defaulat listens on port 80
  api:
      build:
          dockerfile: Dockerfile.dev
          context: ./server #find the Dockerfile.dev in this context, i.e inside of the server directory
      volumes:
        - /app/node_modules #Inside the container. Don't try to override this folder. Don't try to overwrite it.
                            #Don't try to redirect access to it. Just leave that folder as is.
        - ./server:/app #any time our application tries to access anything inside of the app directory inside the container
                        #except for the node modules folder it's going to essentially get redirected back to the server directory
                        #meaning, anytime we make any change to anything inside that server 
                        #will be automatically reflected inside of the app folder of our container.
        
      #now specify environmental variables. check the keys.js file inside the server directory 
      #erver relies upon these environment variables for deciding how it's going to connect
      #to its instance of redi and how it's going to connect to the postgres server.
      environment:
          - REDIS_HOST=redis #Remember that any time that we access a service that has been defined inside of a docker-compose file
                             #we just specify the name of the service, in this case just redis
          - REDIS_PORT=6379 #look in the redis documentaiton inside the hub.docker.com and got to redis

          - PGUSER=postgres # go back to docker hub and get the values for these environmental variables for postgres 
          - PGHOST=postgres  # name of the service
          - PGDATABASE=postgres
          - PGPASSWORD=postgres_password
          - PGPORT=5432
  client:
    build: 
      dockerfile: Dockerfile.dev
      context: ./client
    volumes:
          - /app/node_modules
          - ./client:/app
  worker:
    environment:
        - REDIS_HOST=redis
        - REDIS_PORT=6379
    build: 
      dockerfile: Dockerfile.dev
      context: ./worker
    volumes:
      - /app/node_modules
      - ./worker:/app